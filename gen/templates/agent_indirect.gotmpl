// Package {{ .PackageName }} provides a client for the "{{ .CanisterName }}" canister.
// Do NOT edit this file. It was automatically generated by https://github.com/aviate-labs/agent-go.
package {{ .PackageName }}

import (
    "github.com/aviate-labs/agent-go"{{ if .UsedIDL }}
    "github.com/aviate-labs/agent-go/candid/idl"{{ end }}
    "github.com/aviate-labs/agent-go/principal"
)
{{- if .CanisterID }}

var {{ if .AgentNameUpper }}{{ .AgentNameUpper }}_{{ end }}CANISTER_ID = principal.MustDecode("{{ .CanisterID.String }}"){{ end }}

{{- range .Definitions }}

type {{ .Name }} {{ if .Eq }}= {{end}}{{ .Type }}
{{- end }}

// {{ .AgentName }}Agent is a client for the "{{ .CanisterName }}" canister.
type {{ .AgentName }}Agent struct {
    *agent.Agent
    CanisterId principal.Principal
}

// New{{ .AgentName }}Agent creates a new agent for the "{{ .CanisterName }}" canister.
func New{{ .AgentName }}Agent(canisterId principal.Principal, config agent.Config) (*{{ .AgentName }}Agent, error) {
    a, err := agent.New(config)
    if err != nil {
        return nil, err
    }
    return &{{ .AgentName }}Agent{
        Agent:      a,
        CanisterId: canisterId,
    }, nil
}
{{- range .Methods }}

// {{ .Name }} calls the "{{ .RawName }}" method on the "{{ $.CanisterName }}" canister.
func (a {{ $.AgentName }}Agent) {{ .Name }}({{ range $i, $e := .ArgumentTypes }}{{ if $i }}, {{ end }}{{ $e.Name }} {{ $e.Type }}{{ end }}) {{ if .ReturnTypes }}({{ range .ReturnTypes }}*{{ . }}, {{ end }}error){{ else }}error{{ end }} {
    {{ range $i, $e := .ReturnTypes -}}
        var r{{ $i }} {{ $e }}
    {{ end -}}
    if err := a.{{ .Type }}(
        a.CanisterId,
        "{{ .RawName }}",
        []any{{ "{" }}{{ range $i, $e := .ArgumentTypes }}{{ if $i }}, {{ end }}{{ $e.Name }}{{ end }}{{ "}" }},
        []any{{ "{" }}{{ range $i, $e := .ReturnTypes }}{{ if $i }}, {{ end }}&r{{ $i }}{{ end }}{{ "}"}},
    ); err != nil {
        return {{ range .ReturnTypes }}nil, {{ end }}err
    }
    return {{ range $i, $_ := .ReturnTypes }}&r{{ $i }}, {{ end }}nil
}

// {{ .Name }}{{ .Type }} creates an indirect representation of the "{{ .RawName }}" method on the "{{ $.CanisterName }}" canister.
func (a {{ $.AgentName }}Agent) {{ .Name }}{{ .Type }}({{ range $i, $e := .ArgumentTypes }}{{ if $i }}, {{ end }}{{ $e.Name }} {{ $e.Type }}{{ end }}) (*agent.CandidAPIRequest, error) {
    return a.CreateCandidAPIRequest(
        agent.RequestType{{ .Type }},
        a.CanisterId,
        "{{ .RawName }}",{{ range $i, $e := .ArgumentTypes }}
        {{ $e.Name }},{{ end }}
    )
}

{{- end }}